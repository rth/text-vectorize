// Copyright 2019 vtext developers
//
// Licensed under the Apache License, Version 2.0,
// <http://apache.org/licenses/LICENSE-2.0>. This file may not be copied,
// modified, or distributed except according to those terms.

use crate::tokenize::Tokenizer;

use crate::tokenize_sentence::*;

// macro located `vtext::tokenize_sentence::vecString`
use crate::vecString;

#[test]
fn test_punctuation_sentence_tokenizer() {
    let s = "Here is one. Here is another? Bang!! This trailing text is one more";

    let tokenizer = PunctuationTokenizerParams::default().build().unwrap();
    let tokens: Vec<&str> = tokenizer.tokenize(s).collect();
    let b: &[_] = &[
        "Here is one. ",
        "Here is another? ",
        "Bang!",
        "! ",
        "This trailing text is one more",
    ];
    assert_eq!(tokens, b);

    let tokenizer = PunctuationTokenizer::default();
    let tokens: Vec<&str> = tokenizer.tokenize(s).collect();
    let b: &[_] = &[
        "Here is one. ",
        "Here is another? ",
        "Bang!",
        "! ",
        "This trailing text is one more",
    ];
    assert_eq!(tokens, b);

    let s = "Trailing punctuation!!";
    let tokens: Vec<&str> = tokenizer.tokenize(s).collect();
    let b: &[_] = &["Trailing punctuation!", "!"];
    assert_eq!(tokens, b);

    // String with characters longer than one byte and multi-code points
    let s2 = "y╠Жes? ш┐ЩцШпхПжф╕Аф╕к! эЫДэЦЙ эЕНьКдэК╕";

    let tokenizer = PunctuationTokenizer::default();
    let tokens: Vec<&str> = tokenizer.tokenize(s2).collect();
    let b: &[_] = &["y╠Жes? ", "ш┐ЩцШпхПжф╕Аф╕к! ", "эЫДэЦЙ эЕНьКдэК╕"];
    assert_eq!(tokens, b);
}

#[test]
fn test_unicode_sentence_tokenizer() {
    let s = "Here is one. Here is another? Bang!! This trailing text is one more";

    let tokenizer = UnicodeSentenceTokenizerParams::default().build().unwrap();
    let tokens: Vec<&str> = tokenizer.tokenize(s).collect();
    let b: &[_] = &[
        "Here is one. ",
        "Here is another? ",
        "Bang!! ",
        "This trailing text is one more",
    ];
    assert_eq!(tokens, b);

    let tokenizer = UnicodeSentenceTokenizer::default();
    let tokens: Vec<&str> = tokenizer.tokenize(s).collect();
    let b: &[_] = &[
        "Here is one. ",
        "Here is another? ",
        "Bang!! ",
        "This trailing text is one more",
    ];
    assert_eq!(tokens, b);

    let s = "Trailing punctuation!!";
    let tokens: Vec<&str> = tokenizer.tokenize(s).collect();
    let b: &[_] = &["Trailing punctuation!!"];
    assert_eq!(tokens, b);
}

#[test]
fn test_punctuation_sentence_tokenizer_multi_lang() {
    // More complex unicode languages
    // Examples taken from spaCy test suite
    // https://github.com/explosion/spaCy/blob/d8f3190c0a265033ca367097e00cbf085b34615a/spacy/tests/pipeline/test_sentencizer.py#L134
    let punct = vecString![
        '!', '.', '?', '╓Й', '╪Я', '█Ф', '▄А', '▄Б', '▄В', '▀╣', 'ред', 'рее', 'сБК', 'сБЛ', 'сНв', 'сНз', 'сНи', 'сЩо',
        'сЬ╡', 'сЬ╢', 'саГ', 'саЙ', 'сеД', 'сеЕ', 'ски', 'скй', 'скк', 'скл', 'снЪ', 'снЫ', 'снЮ', 'снЯ', 'с░╗', 'с░╝', 'с▒╛', 'с▒┐',
        'тА╝', 'тА╜', 'тБЗ', 'тБИ', 'тБЙ', 'т╕о', 'т╕╝', 'ъУ┐', 'ъШО', 'ъШП', 'ъЫ│', 'ъЫ╖', 'ъб╢', 'ъб╖', 'ъгО', 'ъгП', 'ъдп', 'ъзИ',
        'ъзЙ', 'ъйЭ', 'ъйЮ', 'ъйЯ', 'ъл░', 'ъл▒', 'ъпл', 'я╣Т', 'я╣Ц', 'я╣Ч', 'я╝Б', 'я╝О', 'я╝Я', 'ЁРйЦ', 'ЁРйЧ', 'ЁСБЗ', 'ЁСБИ',
        'ЁСВ╛', 'ЁСВ┐', 'ЁСГА', 'ЁСГБ', 'ЁСЕБ', 'ЁСЕВ', 'ЁСЕГ', 'ЁСЗЕ', 'ЁСЗЖ', 'ЁСЗН', 'ЁСЗЮ', 'ЁСЗЯ', 'ЁСИ╕', 'ЁСИ╣', 'ЁСИ╗', 'ЁСИ╝', 'ЁСКй', 'ЁССЛ',
        'ЁССМ', 'ЁСЧВ', 'ЁСЧГ', 'ЁСЧЙ', 'ЁСЧК', 'ЁСЧЛ', 'ЁСЧМ', 'ЁСЧН', 'ЁСЧО', 'ЁСЧП', 'ЁСЧР', 'ЁСЧС', 'ЁСЧТ', 'ЁСЧУ', 'ЁСЧФ', 'ЁСЧХ', 'ЁСЧЦ', 'ЁСЧЧ',
        'ЁСЩБ', 'ЁСЩВ', 'ЁСЬ╝', 'ЁСЬ╜', 'ЁСЬ╛', 'ЁСйВ', 'ЁСйГ', 'ЁСкЫ', 'ЁСкЬ', 'ЁС▒Б', 'ЁС▒В', 'ЁЦйо', 'ЁЦйп', 'ЁЦл╡', 'ЁЦм╖', 'ЁЦм╕', 'ЁЦнД', 'ЁЫ▓Я',
        'ЁЭкИ', 'я╜б', 'уАВ'
    ];

    let tokenizer = PunctuationTokenizerParams::default()
        .punctuation(punct)
        .build()
        .unwrap();

    // Bengali
    let expected = [
        "ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ (ржмрж╛ржЩрж▓рж╛, ржмрж╛ржЩрзНржЧрж▓рж╛, рждржерж╛ ржмрж╛ржЩрзНржЧрж╛рж▓рж╛ ржирж╛ржоржЧрзБрж▓рзЛрждрзЗржУ ржкрж░рж┐ржЪрж┐ржд) ржПржХржЯрж┐ ржЗржирзНржжрзЛ-ржЖрж░рзНржп ржнрж╛рж╖рж╛, ржпрж╛ ржжржХрзНрж╖рж┐ржг ржПрж╢рж┐ржпрж╝рж╛рж░ ржмрж╛ржЩрж╛рж▓рж┐ \
        ржЬрж╛рждрж┐рж░ ржкрзНрж░ржзрж╛ржи ржХржерзНржп ржУ рж▓рзЗржЦрзНржп ржнрж╛рж╖рж╛ред ",
        "ржорж╛рждрзГржнрж╛рж╖рзАрж░ рж╕ржВржЦрзНржпрж╛ржпрж╝ ржмрж╛ржВрж▓рж╛ ржЗржирзНржжрзЛ-ржЗржЙрж░рзЛржкрзАржпрж╝ ржнрж╛рж╖рж╛ ржкрж░рж┐ржмрж╛рж░рзЗрж░ ржЪрждрзБрж░рзНрже ржУ ржмрж┐рж╢рзНржмрзЗрж░ рж╖рж╖рзНржа ржмрзГрж╣рждрзНрждржо ржнрж╛рж╖рж╛ред",
        "[рзл] ржорзЛржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕ржВржЦрзНржпрж╛ ржЕржирзБрж╕рж╛рж░рзЗ ржмрж╛ржВрж▓рж╛ ржмрж┐рж╢рзНржмрзЗрж░ рж╕ржкрзНрждржо ржмрзГрж╣рждрзНрждржо ржнрж╛рж╖рж╛ред ",
        "ржмрж╛ржВрж▓рж╛ рж╕рж╛рж░рзНржмржнрзМржо ржнрж╛рж╖рж╛ржнрж┐рждрзНрждрж┐ржХ ржЬрж╛рждрж┐рж░рж╛рж╖рзНржЯрзНрж░ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржПржХржорж╛рждрзНрж░ рж░рж╛рж╖рзНржЯрзНрж░ржнрж╛рж╖рж╛ рждржерж╛ рж╕рж░ржХрж╛рж░рж┐ ржнрж╛рж╖рж╛[рзм] ржПржмржВ ржнрж╛рж░рждрзЗрж░ ржкрж╢рзНржЪрж┐ржоржмржЩрзНржЧ, рждрзНрж░рж┐ржкрзБрж░рж╛, \
        ржЖрж╕рж╛ржорзЗрж░ ржмрж░рж╛ржХ ржЙржкрждрзНржпржХрж╛рж░ рж╕рж░ржХрж╛рж░рж┐ ржнрж╛рж╖рж╛ред ",
        "ржмржЩрзНржЧрзЛржкрж╕рж╛ржЧрж░рзЗ ржЕржмрж╕рзНржерж┐ржд ржЖржирзНржжрж╛ржорж╛ржи ржжрзНржмрзАржкржкрзБржЮрзНржЬрзЗрж░ ржкрзНрж░ржзрж╛ржи ржХржерзНржп ржнрж╛рж╖рж╛ ржмрж╛ржВрж▓рж╛ред ",
        "ржПржЫрж╛ржбрж╝рж╛ ржнрж╛рж░рждрзЗрж░ ржЭрж╛ржбрж╝ржЦржгрзНржб, ржмрж┐рж╣рж╛рж░, ржорзЗржШрж╛рж▓ржпрж╝, ржорж┐ржЬрзЛрж░рж╛ржо, ржЙржбрж╝рж┐рж╖рзНржпрж╛ рж░рж╛ржЬрзНржпржЧрзБрж▓рзЛрждрзЗ ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп ржкрж░рж┐ржорж╛ржгрзЗ ржмрж╛ржВрж▓рж╛ржнрж╛рж╖рзА ржЬржиржЧржг рж░ржпрж╝рзЗржЫрзЗред ",
        "ржнрж╛рж░рждрзЗ рж╣рж┐ржирзНржжрж┐рж░ ржкрж░рзЗржЗ рж╕рж░рзНржмрж╛ржзрж┐ржХ ржкрзНрж░ржЪрж▓рж┐ржд ржнрж╛рж╖рж╛ ржмрж╛ржВрж▓рж╛ред",
        "[рзн][рзо] ржПржЫрж╛ржбрж╝рж╛ржУ ржоржзрзНржп ржкрзНрж░рж╛ржЪрзНржп, ржЖржорзЗрж░рж┐ржХрж╛ ржУ ржЗржЙрж░рзЛржкрзЗ ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп ржкрж░рж┐ржорж╛ржгрзЗ ржмрж╛ржВрж▓рж╛ржнрж╛рж╖рзА ржЕржнрж┐ржмрж╛рж╕рзА рж░ржпрж╝рзЗржЫрзЗред",
        "[рзп] рж╕рж╛рж░рж╛ ржмрж┐рж╢рзНржмрзЗ рж╕ржм ржорж┐рж▓рж┐ржпрж╝рзЗ рзирзм ржХрзЛржЯрж┐рж░ ржЕржзрж┐ржХ рж▓рзЛржХ ржжрзИржиржирзНржжрж┐ржи ржЬрзАржмржирзЗ ржмрж╛ржВрж▓рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред",
        "[рзи] ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЬрж╛рждрзАржпрж╝ рж╕ржЩрзНржЧрзАржд ржПржмржВ ржнрж╛рж░рждрзЗрж░ ржЬрж╛рждрзАржпрж╝ рж╕ржЩрзНржЧрзАржд ржУ рж╕рзНрждрзЛрждрзНрж░ ржмрж╛ржВрж▓рж╛рждрзЗ рж░ржЪрж┐рждред",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // German
    let expected = [
        "Die deutsche Sprache bzw. ",
        "Deutsch ([d╔Ф╩П╠пt═б╩Г]; abgek├╝rzt dt. ",
        "oder dtsch.",
        ") ist eine westgermanische Sprache. ",
        "Ihr Sprachraum umfasst Deutschland, ├Цsterreich, die Deutschschweiz, Liechtenstein, \
        Luxemburg, Ostbelgien, S├╝dtirol, das Elsass und Lothringen sowie Nordschleswig. ",
        "Au├Яerdem ist sie eine Minderheitensprache in einigen europ├дischen und au├Яereurop├дischen \
        L├дndern, z. ",
        "B. ",
        "in Rum├дnien und S├╝dafrika, sowie Nationalsprache im afrikanischen Namibia",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Hindi
    let expected = [
        "рд╣рд┐рдиреНрджреА рд╡рд┐рд╢реНрд╡ рдХреА рдПрдХ рдкреНрд░рдореБрдЦ рднрд╛рд╖рд╛ рд╣реИ рдПрд╡рдВ рднрд╛рд░рдд рдХреА рд░рд╛рдЬрднрд╛рд╖рд╛ рд╣реИред ",
        "рдХреЗрдиреНрджреНрд░реАрдп рд╕реНрддрд░ рдкрд░ рднрд╛рд░рдд рдореЗрдВ рджреВрд╕рд░реА рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рднрд╛рд╖рд╛ рдЕрдВрдЧреНрд░реЗрдЬреА рд╣реИред ",
        "рдпрд╣ рд╣рд┐рдВрджреБрд╕реНрддрд╛рдиреА рднрд╛рд╖рд╛ рдХреА рдПрдХ рдорд╛рдирдХреАрдХреГрдд рд░реВрдк рд╣реИ рдЬрд┐рд╕рдореЗрдВ рд╕рдВрд╕реНрдХреГрдд рдХреЗ рддрддреНрд╕рдо рддрдерд╛ рддрджреНрднрд╡ рд╢рдмреНрджреЛрдВ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдЕрдзрд┐рдХ рд╣реИ рдФрд░ рдЕрд░рдмреА-рдлрд╝рд╛рд░рд╕реА \
        рд╢рдмреНрдж рдХрдо рд╣реИрдВред ",
        "рд╣рд┐рдВрджреА рд╕рдВрд╡реИрдзрд╛рдирд┐рдХ рд░реВрдк рд╕реЗ рднрд╛рд░рдд рдХреА рд░рд╛рдЬрднрд╛рд╖рд╛ рдФрд░ рднрд╛рд░рдд рдХреА рд╕рдмрд╕реЗ рдЕрдзрд┐рдХ рдмреЛрд▓реА рдФрд░ рд╕рдордЭреА рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рднрд╛рд╖рд╛ рд╣реИред ",
        "рд╣рд╛рд▓рд╛рдБрдХрд┐, рд╣рд┐рдиреНрджреА рднрд╛рд░рдд рдХреА рд░рд╛рд╖реНрдЯреНрд░рднрд╛рд╖рд╛ рдирд╣реАрдВ рд╣реИ,[3] рдХреНрдпреЛрдВрдХрд┐ рднрд╛рд░рдд рдХреЗ рд╕рдВрд╡рд┐рдзрд╛рди рдореЗрдВ рдХреЛрдИ рднреА рднрд╛рд╖рд╛ рдХреЛ рдРрд╕рд╛ рджрд░реНрдЬрд╛ рдирд╣реАрдВ рджрд┐рдпрд╛ рдЧрдпрд╛ рдерд╛ред",
        "[4][5] рдЪреАрдиреА рдХреЗ рдмрд╛рдж рдпрд╣ рд╡рд┐рд╢реНрд╡ рдореЗрдВ рд╕рдмрд╕реЗ рдЕрдзрд┐рдХ рдмреЛрд▓реА рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рднрд╛рд╖рд╛ рднреА рд╣реИред ",
        "рд╡рд┐рд╢реНрд╡ рдЖрд░реНрдерд┐рдХ рдордВрдЪ рдХреА рдЧрдгрдирд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдпрд╣ рд╡рд┐рд╢реНрд╡ рдХреА рджрд╕ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ рд╕реЗ рдПрдХ рд╣реИред",
        "[6]"
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Kannada
    let expected = [
        "р▓жр│Нр▓░р▓╛р▓╡р▓┐р▓б р▓нр▓╛р▓╖р│Жр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓кр│Нр▓░р▓╛р▓ор│Бр▓Цр│Нр▓пр▓╡р│Бр▓│р│Нр▓│ р▓нр▓╛р▓╖р│Жр▓пр│В р▓нр▓╛р▓░р▓др▓ж р▓кр│Бр▓░р▓╛р▓др▓ир▓╡р▓╛р▓ж р▓нр▓╛р▓╖р│Жр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓Тр▓Вр▓жр│В р▓Жр▓Чр▓┐р▓░р│Бр▓╡ р▓Хр▓ир│Нр▓ир▓б р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б \
        р▓Ер▓жр▓░ р▓╡р▓┐р▓╡р▓┐р▓з р▓░р│Вр▓кр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓╕р│Бр▓ор▓╛р▓░р│Б р│кр│л р▓жр▓╢р▓▓р▓Хр│Нр▓╖ р▓Ьр▓ир▓░р│Б р▓Жр▓бр│Б р▓ир│Бр▓бр▓┐р▓пр▓╛р▓Чр▓┐ р▓мр▓│р▓╕р│Бр▓др│Нр▓др▓▓р▓┐р▓жр│Нр▓жр▓╛р▓░р│Ж. ",
        "р▓Хр▓ир│Нр▓ир▓б р▓Хр▓░р│Нр▓ир▓╛р▓Яр▓Х р▓░р▓╛р▓Ьр│Нр▓пр▓ж р▓Жр▓бр▓│р▓┐р▓д р▓нр▓╛р▓╖р│Ж.",
        "[р│зр│з] р▓Ьр▓Чр▓др│Нр▓др▓┐р▓ир▓▓р│Нр▓▓р▓┐ р▓Ер▓др│Нр▓пр▓Вр▓д р▓╣р│Жр▓Ър│Нр▓Ър│Б р▓ор▓Вр▓жр▓┐ р▓ор▓╛р▓др▓ир▓╛р▓бр│Бр▓╡ р▓нр▓╛р▓╖р│Жр▓пр│Жр▓Вр▓м р▓ир│Жр▓▓р│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓Зр▓кр│Нр▓кр▓др│Кр▓Вр▓мр▓др│Нр▓др▓ир│Жр▓п р▓╕р│Нр▓ер▓╛р▓и р▓Хр▓ир│Нр▓ир▓бр▓Хр│Нр▓Хр▓┐р▓жр│Ж. ",
        "р│ир│жр│зр│зр▓░ р▓Ьр▓ир▓Чр▓гр▓др▓┐р▓п р▓кр│Нр▓░р▓Хр▓╛р▓░ р▓Ьр▓Чр▓др│Нр▓др▓┐р▓ир▓▓р│Нр▓▓р▓┐ р│м.",
        "р│к р▓Хр│Лр▓Яр▓┐ р▓Ьр▓ир▓Чр▓│р│Б р▓Хр▓ир│Нр▓ир▓б р▓ор▓╛р▓др▓ир▓╛р▓бр│Бр▓др│Нр▓др▓╛р▓░р│Ж р▓Ор▓Вр▓жр│Б р▓др▓┐р▓│р▓┐р▓жр│Бр▓мр▓Вр▓жр▓┐р▓жр│Ж. ",
        "р▓Зр▓╡р▓░р▓▓р│Нр▓▓р▓┐ р│л.",
        "р│л р▓Хр│Лр▓Яр▓┐ р▓Ьр▓ир▓Чр▓│ р▓ор▓╛р▓др│Гр▓нр▓╛р▓╖р│Ж р▓Хр▓ир│Нр▓ир▓бр▓╡р▓╛р▓Чр▓┐р▓жр│Ж. ",
        "р▓мр│Нр▓░р▓╛р▓╣р│Нр▓ор▓┐ р▓▓р▓┐р▓кр▓┐р▓пр▓┐р▓Вр▓ж р▓░р│Вр▓кр│Бр▓Чр│Кр▓Вр▓б р▓Хр▓ир│Нр▓ир▓б р▓▓р▓┐р▓кр▓┐р▓пр▓ир│Нр▓ир│Б р▓Йр▓кр▓пр│Лр▓Чр▓┐р▓╕р▓┐ р▓Хр▓ир│Нр▓ир▓б р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓мр▓░р│Жр▓пр▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓жр│Ж. ",
        "р▓Хр▓ир│Нр▓ир▓б р▓мр▓░р▓╣р▓ж р▓ор▓╛р▓жр▓░р▓┐р▓Чр▓│р▓┐р▓Чр│Ж р▓╕р▓╛р▓╡р▓┐р▓░р▓ж р▓Рр▓ир│Вр▓░р│Б р▓╡р▓░р│Бр▓╖р▓Чр▓│ р▓Ър▓░р▓┐р▓др│Нр▓░р│Жр▓пр▓┐р▓жр│Ж. ",
        "р▓Хр│Нр▓░р▓┐.",
        "р▓╢. ",
        "р▓Жр▓░р▓ир│Жр▓п р▓╢р▓др▓ор▓╛р▓ир▓ж р▓кр▓╢р│Нр▓Ър▓┐р▓о р▓Чр▓Вр▓Ч р▓╕р▓╛р▓ор│Нр▓░р▓╛р▓Ьр│Нр▓пр▓ж р▓Хр▓╛р▓▓р▓жр▓▓р│Нр▓▓р▓┐ [р│зр│и] р▓ор▓др│Нр▓др│Б р▓Тр▓Вр▓мр▓др│Нр▓др▓ир│Жр▓п р▓╢р▓др▓ор▓╛р▓ир▓ж р▓░р▓╛р▓╖р│Нр▓Яр│Нр▓░р▓Хр│Вр▓Я р▓╕р▓╛р▓ор│Нр▓░р▓╛р▓Ьр│Нр▓пр▓ж \
        р▓Хр▓╛р▓▓р▓жр▓▓р│Нр▓▓р▓┐ р▓╣р▓│р▓Чр▓ир│Нр▓ир▓б р▓╕р▓╛р▓╣р▓┐р▓др│Нр▓п р▓Ер▓др│Нр▓пр▓Вр▓д р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓и р▓░р▓╛р▓Ьр▓╛р▓╢р│Нр▓░р▓п р▓кр▓бр│Жр▓пр▓┐р▓др│Б.",
        "[р│зр│й][р│зр│к] р▓Ер▓жр▓▓р│Нр▓▓р▓жр│Ж р▓╕р▓╛р▓╡р▓┐р▓░ р▓╡р▓░р│Бр▓╖р▓Чр▓│ р▓╕р▓╛р▓╣р▓┐р▓др│Нр▓п р▓кр▓░р▓Вр▓кр▓░р│Ж р▓Хр▓ир│Нр▓ир▓бр▓Хр│Нр▓Хр▓┐р▓жр│Ж.",
        "[р│зр│л]р▓╡р▓┐р▓ир│Лр▓мр▓╛ р▓нр▓╛р▓╡р│Ж р▓Хр▓ир│Нр▓ир▓б р▓▓р▓┐р▓кр▓┐р▓пр▓ир│Нр▓ир│Б р▓▓р▓┐р▓кр▓┐р▓Чр▓│ р▓░р▓╛р▓гр▓┐р▓пр│Жр▓Вр▓жр│Б р▓╣р│Кр▓Чр▓│р▓┐р▓жр│Нр▓жр▓╛р▓░р│Ж.",
        "[р▓╕р│Вр▓Хр│Нр▓д р▓Йр▓▓р│Нр▓▓р│Зр▓Цр▓и р▓мр│Зр▓Хр│Б]",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Sinhalese
    let expected = [
        "р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖Пр╖Ар╖Ъ р╢┤р╖КтАНр╢╗р╢░р╖Пр╢▒ р╢вр╖Пр╢нр╖Тр╢║ р╖Ар╢▒ р╖Гр╖Тр╢Вр╖Др╢╜ р╢вр╢▒р╢║р╖Пр╢Ьр╖Ъ р╢╕р╖Ар╖К р╢╢р╖Г р╖Гр╖Тр╢Вр╖Др╢╜ р╖Ар╖Щр╢║р╖Т. ",
        "р╢Ер╢п р╖Ар╢▒ р╖Ар╖Тр╢з р╢╕р╖Тр╢╜р╖Тр╢║р╢▒ 20 р╢Ър╢з р╢Ер╢░р╖Тр╢Ъ р╖Гр╖Тр╢Вр╖Др╢╜ р╖Гр╖Д р╢╕р╖Тр╢╜р╖Тр╢║р╢▒ 3р╢Ър╢з р╢Ер╢░р╖Тр╢Ъ р╖Гр╖Тр╢Вр╖Др╢╜ р╢▒р╖Ьр╖Ар╢▒ р╢вр╢▒р╢Ьр╖Др╢▒р╢║р╢Ър╖К р╖Гр╖Тр╢Вр╖Др╢╜ р╢╖р╖Пр╖Вр╖Пр╖А р╢╖р╖Пр╖Ар╖Тр╢н р╢Ър╢╗р╢нр╖Т. ",
        "р╖Гр╖Тр╢Вр╖Др╢╜тАН р╢Йр╢▒р╖Кр╢пр╖Ф-р╢║р╖Фр╢╗р╖Эр╢┤р╖Ур╢║ р╢╖р╖Пр╖Вр╖Пр╖Ар╢╜ р╢Лр╢┤ р╢Ьр╢лр╢║р╢Ър╖К р╖Ар╢▒ р╢Йр╢▒р╖Кр╢пр╖Ф-р╢Жр╢╗р╖Кр╢║ р╢╖р╖Пр╖Вр╖П р╢Ьр╢лр╢║р╢з р╢Ер╢║р╖Тр╢нр╖Т р╖Ар╢▒ р╢Ер╢нр╢╗ р╢╕р╖Пр╢╜ р╢пр╖Тр╖Ар╢║р╖Тр╢▒ р╢╖р╖Пр╖Ар╖Тр╢н р╢Ър╢╗р╢▒ р╢пр╖Тр╖Ар╖Щр╖Др╖Т \
        р╢╖р╖Пр╖Вр╖Пр╖А р╖Гр╖Тр╢Вр╖Др╢╜р╢║р╖Щр╢▒р╖К р╢┤р╖Рр╖Ар╢н р╢Ср╢▒р╖Кр╢▒р╢Ър╖Т. ",
        "р╖Гр╖Тр╢Вр╖Др╢╜ р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖Пр╖Ар╖Ъ р╢▒р╖Тр╢╜ р╢╖р╖Пр╖Вр╖Пр╖Ар╢║р╖Т .",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Tamil
    let expected = [
        "родрооро┐ро┤рпН роорпКро┤ро┐ (Tamil language) родрооро┐ро┤ро░рпНроХро│ро┐ройродрпБроорпН, родрооро┐ро┤рпН рокрпЗроЪрпБроорпН рокро▓ро░родрпБроорпН родро╛ропрпНроорпКро┤ро┐ роЖроХрпБроорпН. ",
        "родрооро┐ро┤рпН родро┐ро░ро╛ро╡ро┐роЯ роорпКро┤ро┐роХрпН роХрпБроЯрпБроорпНрокродрпНродро┐ройрпН роорпБродройрпНроорпИропро╛рой роорпКро┤ро┐роХро│ро┐ро▓рпН роТройрпНро▒рпБроорпН роЪрпЖроорпНроорпКро┤ро┐ропрпБроорпН роЖроХрпБроорпН. ",
        "роЗроирпНродро┐ропро╛, роЗро▓роЩрпНроХрпИ, рооро▓рпЗроЪро┐ропро╛, роЪро┐роЩрпНроХрокрпНрокрпВро░рпН роЖроХро┐роп роиро╛роЯрпБроХро│ро┐ро▓рпН роЕродро┐роХ роЕро│ро╡ро┐ро▓рпБроорпН, роРроХрпНроХро┐роп роЕро░рокрпБ роЕроорпАро░роХроорпН, \
        родрпЖройрпНройро╛рокрпНрокро┐ро░ро┐роХрпНроХро╛, роорпКро░ро┐роЪро┐ропроЪрпБ, рокро┐роЬро┐, ро░рпАропрпВройро┐ропройрпН, роЯро┐ро░ро┐ройро┐роЯро╛роЯрпН рокрпЛройрпНро▒ роиро╛роЯрпБроХро│ро┐ро▓рпН роЪро┐ро▒ро┐роп роЕро│ро╡ро┐ро▓рпБроорпН родрооро┐ро┤рпН \
        рокрпЗроЪрокрпНрокроЯрпБроХро┐ро▒родрпБ. ",
        "1997роЖроорпН роЖрогрпНроЯрпБрокрпН рокрпБро│рпНро│ро┐ ро╡ро┐ро╡ро░рокрпНрокроЯро┐ роЙро▓роХроорпН роорпБро┤рпБро╡родро┐ро▓рпБроорпН 8 роХрпЛроЯро┐ (80 рооро┐ро▓рпНро▓ро┐ропройрпН) роороХрпНроХро│ро╛ро▓рпН рокрпЗроЪрокрпНрокроЯрпБроорпН \
        родрооро┐ро┤рпН[13], роТро░рпБ роорпКро┤ро┐ропрпИродрпН родро╛ропрпНроорпКро┤ро┐ропро╛роХроХрпН роХрпКрогрпНроЯрпБ рокрпЗроЪрпБроорпН роороХрпНроХро│ро┐ройрпН роОрогрпНрогро┐роХрпНроХрпИ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН \
        рокродро┐ройрпЖроЯрпНроЯро╛ро╡родрпБ роЗроЯродрпНродро┐ро▓рпН роЙро│рпНро│родрпБ.",
        "[14] роЗрогрпИропродрпНродро┐ро▓рпН роЕродро┐роХроорпН рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроорпН роЗроирпНродро┐роп роорпКро┤ро┐роХро│ро┐ро▓рпН родрооро┐ро┤рпН роорпБродройрпНроорпИропро╛роХ роЙро│рпНро│родро╛роХ 2017 роЖро╡родрпБ \
        роЖрогрпНроЯро┐ро▓рпН роироЯрпИрокрпЖро▒рпНро▒ роХрпВроХрпБро│рпН роХрогроХрпНроХрпЖроЯрпБрокрпНрокро┐ро▓рпН родрпЖро░ро┐роп ро╡роирпНродродрпБ.",
        "[15]",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Telugu
    let expected = [
        "р░Жр░Вр░зр▒Нр░░ р░кр▒Нр░░р░жр▒Зр░╢р▒Н, р░др▒Жр░▓р░Вр░Чр░╛р░г р░░р░╛р░╖р▒Нр░Яр▒Нр░░р░╛р░▓ р░Ер░зр░┐р░Хр░╛р░░ р░нр░╛р░╖ р░др▒Жр░▓р▒Бр░Чр▒Б. ",
        "р░нр░╛р░░р░д р░жр▒Зр░╢р░Вр░▓р▒Л р░др▒Жр░▓р▒Бр░Чр▒Б р░ор░╛р░др▒Гр░нр░╛р░╖р░Чр░╛ р░ор░╛р░Яр▒Нр░▓р░╛р░бр▒З 8.",
        "7 р░Хр▒Лр░Яр▒Нр░▓ (2001) р░Ьр░ир░╛р░нр░╛р░др▒Л [1] р░кр▒Нр░░р░╛р░Вр░др▒Ар░п р░нр░╛р░╖р░▓р░▓р▒Л р░ор▒Кр░жр░Яр░┐ р░╕р▒Нр░ер░╛р░ир░Вр░▓р▒Л р░Йр░Вр░жр░┐. ",
        "р░кр▒Нр░░р░кр░Вр░Ър░Вр░▓р▒Лр░ир░┐ р░кр▒Нр░░р░Ьр░▓р▒Б р░Ер░др▒Нр░пр░зр░┐р░Хр░ор▒Бр░Чр░╛ р░ор░╛р░Яр▒Нр░▓р░╛р░бр▒З р░нр░╛р░╖р░▓р░▓р▒Л 15 р░╕р▒Нр░ер░╛р░ир░ор▒Бр░▓р▒Лр░ир▒В, р░нр░╛р░░р░д р░жр▒Зр░╢р░ор▒Бр░▓р▒Л р░╣р░┐р░Вр░жр▒А, р░др░░р▒Нр░╡р░╛р░д \
        р░╕р▒Нр░ер░╛р░ир░ор▒Бр░▓р▒Лр░ир▒В р░ир░┐р░▓р▒Бр░╕р▒Нр░др▒Бр░Вр░жр░┐. ",
        "р░кр░╛р░др░╡р▒Ир░и р░кр▒Нр░░р░кр░Вр░Ъ р░нр░╛р░╖ р░Чр░гр░╛р░Вр░Хр░╛р░▓ (р░Ор░ер▒Нр░ир▒Лр░▓р░╛р░Чр▒Н) р░кр▒Нр░░р░Хр░╛р░░р░В р░кр▒Нр░░р░кр░Вр░Ър░╡р▒Нр░пр░╛р░кр▒Нр░др░Вр░Чр░╛ 7.",
        "4 р░Хр▒Лр░Яр▒Нр░▓р▒Б р░ор░Вр░жр░┐р░Хр░┐ р░ор░╛р░др▒Гр░нр░╛р░╖р░Чр░╛ р░Йр░Вр░жр░┐.",
        "[2] р░ор▒Кр░жр░Яр░┐ р░нр░╛р░╖р░Чр░╛ р░ор░╛р░Яр▒Нр░▓р░╛р░бр░др░╛р░░р▒Б. ",
        "р░Ер░др░┐ р░кр▒Нр░░р░╛р░Ър▒Ар░и р░жр▒Зр░╢ р░нр░╛р░╖р░▓р░▓р▒Л р░╕р░Вр░╕р▒Нр░Хр▒Гр░др░ор▒Б р░др░ор░┐р░│р░ор▒Бр░др▒Л р░мр░╛р░Яр▒Б р░др▒Жр░▓р▒Бр░Чр▒Б р░нр░╛р░╖р░ир▒Б 2008 р░Ер░Хр▒Нр░Яр▒Лр░мр░░р▒Б 31р░и р░нр░╛р░░р░д р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡р░ор▒Б \
        р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░┐р░Вр░жр░┐.",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Urdu
    let expected = [
        "╪з┘П╪▒╪п┘П┘И ┘Д╪┤┌й╪▒█М ╪▓╪и╪з┘Ж[8] (█М╪з ╪м╪п█М╪п ┘Е╪╣█М╪з╪▒█М ╪з╪▒╪п┘И) ╪и╪▒╪╡╪║█М╪▒ ┌й█М ┘Е╪╣█М╪з╪▒█М ╪▓╪и╪з┘Ж┘И┌║ ┘Е█М┌║ ╪│█Т ╪з█М┌й █Б█Т█Ф ",
        "█М█Б ┘╛╪з┌й╪│╪к╪з┘Ж ┌й█М ┘В┘И┘Е█М ╪з┘И╪▒ ╪▒╪з╪и╪╖█Б ╪╣╪з┘Е█Б ┌й█М ╪▓╪и╪з┘Ж █Б█Т╪М ╪м╪и┌й█Б ╪и┌╛╪з╪▒╪к ┌й█М ┌Ж┌╛█Т ╪▒█М╪з╪│╪к┘И┌║ ┌й█М ╪п┘Б╪к╪▒█М ╪▓╪и╪з┘Ж ┌й╪з ╪п╪▒╪м█Б ╪▒┌й┌╛╪к█М █Б█Т█Ф ",
        "╪в╪ж█М┘Ж █Б┘Ж╪п ┌й█Т ┘Е╪╖╪з╪и┘В ╪з╪│█Т 22 ╪п┘Б╪к╪▒█М ╪┤┘Ж╪з╪о╪к ╪▓╪и╪з┘Ж┘И┌║ ┘Е█М┌║ ╪┤╪з┘Е┘Д ┌й█М╪з ╪м╪з┌Ж┌й╪з █Б█Т█Ф ",
        "2001╪б ┌й█М ┘Е╪▒╪п┘Е ╪┤┘Е╪з╪▒█М ┌й█Т ┘Е╪╖╪з╪и┘В ╪з╪▒╪п┘И ┌й┘И ╪и╪╖┘И╪▒ ┘Е╪з╪п╪▒█М ╪▓╪и╪з┘Ж ╪и┌╛╪з╪▒╪к ┘Е█М┌║ 5.",
        "01% ┘Б█М╪╡╪п ┘Д┘И┌п ╪и┘И┘Д╪к█Т █Б█М┌║ ╪з┘И╪▒ ╪з╪│ ┘Д╪н╪з╪╕ ╪│█Т █М█Б ╪и┌╛╪з╪▒╪к ┌й█М ┌Ж┌╛┘╣█М ╪и┌С█М ╪▓╪и╪з┘Ж █Б█Т ╪м╪и┌й█Б ┘╛╪з┌й╪│╪к╪з┘Ж ┘Е█М┌║ ╪з╪│█Т ╪и╪╖┘И╪▒ ┘Е╪з╪п╪▒█М ╪▓╪и╪з┘Ж 7.",
        "59% ┘Б█М╪╡╪п ┘Д┘И┌п ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒╪к█Т █Б█М┌║╪М █М█Б ┘╛╪з┌й╪│╪к╪з┘Ж ┌й█М ┘╛╪з┘Ж┌Ж┘И█М┌║ ╪и┌С█М ╪▓╪и╪з┘Ж █Б█Т█Ф ",
        "╪з╪▒╪п┘И ╪к╪з╪▒█М╪о█М ╪╖┘И╪▒ ┘╛╪▒ █Б┘Ж╪п┘И╪│╪к╪з┘Ж ┌й█М ┘Е╪│┘Д┘Е ╪в╪и╪з╪п█М ╪│█Т ╪м┌С█М █Б█Т█Ф",
        "[╪н┘И╪з┘Д█Б ╪п╪▒┌й╪з╪▒] ╪и╪╣╪╢ ╪░╪о█М╪▒█Б ╪з┘Д┘Б╪з╪╕ ┌й█Т ╪╣┘Д╪з┘И█Б █М█Б ╪▓╪и╪з┘Ж ┘Е╪╣█М╪з╪▒█М █Б┘Ж╪п█М ╪│█Т ┘В╪з╪и┘Д ┘Б█Б┘Е █Б█Т ╪м┘И ╪з╪│ ╪о╪╖█Т ┌й█М █Б┘Ж╪п┘И╪д┌║ ╪│█Т ┘Е┘Ж╪│┘И╪и █Б█Т█Ф",
        "[╪н┘И╪з┘Д█Б ╪п╪▒┌й╪з╪▒] ╪▓╪и╪з┘Ж┘Р ╪з╪▒╪п┘И ┌й┘И ┘╛█Б┌Ж╪з┘Ж ┘И ╪к╪▒┘В█М ╪з╪│ ┘И┘В╪к ┘Е┘Д█М ╪м╪и ╪и╪▒╪╖╪з┘Ж┘И█М ╪п┘И╪▒ ┘Е█М┌║ ╪з┘Ж┌п╪▒█М╪▓ ╪н┌й┘Е╪▒╪з┘Ж┘И┌║ ┘Ж█Т ╪з╪│█Т ┘Б╪з╪▒╪│█М ┌й█М ╪и╪м╪з╪ж█Т ╪з┘Ж┌п╪▒█М╪▓█М ┌й█Т ╪│╪з╪к┌╛ ╪┤┘Е╪з┘Д█М █Б┘Ж╪п┘И╪│╪к╪з┘Ж ┌й█Т ╪╣┘Д╪з┘В┘И┌║ ╪з┘И╪▒ ╪м┘Е┘И┌║ ┘И ┌й╪┤┘Е█М╪▒ ┘Е█М┌║ ╪з╪│█Т ╪│┘Ж█Б 1846╪б ╪з┘И╪▒ ┘╛┘Ж╪м╪з╪и ┘Е█М┌║ ╪│┘Ж█Б 1849╪б ┘Е█М┌║ ╪и╪╖┘И╪▒ ╪п┘Б╪к╪▒█М ╪▓╪и╪з┘Ж ┘Ж╪з┘Б╪░ ┌й█М╪з█Ф ",
        "╪з╪│ ┌й█Т ╪╣┘Д╪з┘И█Б ╪о┘Д█М╪м█М╪М █М┘И╪▒┘╛█М╪М ╪з█М╪┤█М╪з╪ж█М ╪з┘И╪▒ ╪з┘Е╪▒█М┌й█М ╪╣┘Д╪з┘В┘И┌║ ┘Е█М┌║ ╪з╪▒╪п┘И ╪и┘И┘Д┘Ж█Т ┘И╪з┘Д┘И┌║ ┌й█М ╪з█М┌й ╪и┌С█М ╪к╪╣╪п╪з╪п ╪в╪и╪з╪п █Б█Т ╪м┘И ╪и┘Ж█М╪з╪п█М ╪╖┘И╪▒ ┘╛╪▒ ╪м┘Ж┘И╪и█М ╪з█М╪┤█М╪з╪б ╪│█Т ┌й┘И┌Ж ┌й╪▒┘Ж█Т ┘И╪з┘Д█Т ╪з█Б┘Д┘Р ╪з╪▒╪п┘И █Б█М┌║█Ф ",
        "1999╪б ┌й█Т ╪з╪╣╪п╪з╪п ┘И╪┤┘Е╪з╪▒ ┌й█Т ┘Е╪╖╪з╪и┘В ╪з╪▒╪п┘И ╪▓╪и╪з┘Ж ┌й█Т ┘Е╪м┘Е┘И╪╣█М ┘Е╪к┌й┘Д┘Е█М┘Ж ┌й█М ╪к╪╣╪п╪з╪п ╪п╪│ ┌й╪▒┘И┌С ╪│╪з┘╣┌╛ ┘Д╪з┌й┌╛ ┌й█Т ┘Д┌п ╪и┌╛┌п ╪к┌╛█М█Ф ",
        "╪з╪│ ┘Д╪н╪з╪╕ ╪│█Т █М█Б ╪п┘Ж█М╪з ┌й█М ┘Ж┘И█М┌║ ╪и┌С█М ╪▓╪и╪з┘Ж █Б█Т█Ф",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);
}

#[test]
fn test_unicode_sentence_tokenizer_multi_lang() {
    // More complex unicode languages
    // Examples taken from spaCy test suite
    // https://github.com/explosion/spaCy/blob/d8f3190c0a265033ca367097e00cbf085b34615a/spacy/tests/pipeline/test_sentencizer.py#L134
    let tokenizer = UnicodeSentenceTokenizer::default();

    // Bengali
    let expected = [
        "ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ (ржмрж╛ржЩрж▓рж╛, ржмрж╛ржЩрзНржЧрж▓рж╛, рждржерж╛ ржмрж╛ржЩрзНржЧрж╛рж▓рж╛ ржирж╛ржоржЧрзБрж▓рзЛрждрзЗржУ ржкрж░рж┐ржЪрж┐ржд) ржПржХржЯрж┐ ржЗржирзНржжрзЛ-ржЖрж░рзНржп ржнрж╛рж╖рж╛, ржпрж╛ ржжржХрзНрж╖рж┐ржг ржПрж╢рж┐ржпрж╝рж╛рж░ ржмрж╛ржЩрж╛рж▓рж┐ ржЬрж╛рждрж┐рж░ ржкрзНрж░ржзрж╛ржи ржХржерзНржп ржУ рж▓рзЗржЦрзНржп ржнрж╛рж╖рж╛ред ",
        "ржорж╛рждрзГржнрж╛рж╖рзАрж░ рж╕ржВржЦрзНржпрж╛ржпрж╝ ржмрж╛ржВрж▓рж╛ ржЗржирзНржжрзЛ-ржЗржЙрж░рзЛржкрзАржпрж╝ ржнрж╛рж╖рж╛ ржкрж░рж┐ржмрж╛рж░рзЗрж░ ржЪрждрзБрж░рзНрже ржУ ржмрж┐рж╢рзНржмрзЗрж░ рж╖рж╖рзНржа ржмрзГрж╣рждрзНрждржо ржнрж╛рж╖рж╛ред[",
        "рзл] ржорзЛржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ рж╕ржВржЦрзНржпрж╛ ржЕржирзБрж╕рж╛рж░рзЗ ржмрж╛ржВрж▓рж╛ ржмрж┐рж╢рзНржмрзЗрж░ рж╕ржкрзНрждржо ржмрзГрж╣рждрзНрждржо ржнрж╛рж╖рж╛ред ",
        "ржмрж╛ржВрж▓рж╛ рж╕рж╛рж░рзНржмржнрзМржо ржнрж╛рж╖рж╛ржнрж┐рждрзНрждрж┐ржХ ржЬрж╛рждрж┐рж░рж╛рж╖рзНржЯрзНрж░ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржПржХржорж╛рждрзНрж░ рж░рж╛рж╖рзНржЯрзНрж░ржнрж╛рж╖рж╛ рждржерж╛ рж╕рж░ржХрж╛рж░рж┐ ржнрж╛рж╖рж╛[рзм] ржПржмржВ ржнрж╛рж░рждрзЗрж░ ржкрж╢рзНржЪрж┐ржоржмржЩрзНржЧ, рждрзНрж░рж┐ржкрзБрж░рж╛, ржЖрж╕рж╛ржорзЗрж░ ржмрж░рж╛ржХ ржЙржкрждрзНржпржХрж╛рж░ рж╕рж░ржХрж╛рж░рж┐ ржнрж╛рж╖рж╛ред ",
        "ржмржЩрзНржЧрзЛржкрж╕рж╛ржЧрж░рзЗ ржЕржмрж╕рзНржерж┐ржд ржЖржирзНржжрж╛ржорж╛ржи ржжрзНржмрзАржкржкрзБржЮрзНржЬрзЗрж░ ржкрзНрж░ржзрж╛ржи ржХржерзНржп ржнрж╛рж╖рж╛ ржмрж╛ржВрж▓рж╛ред ",
        "ржПржЫрж╛ржбрж╝рж╛ ржнрж╛рж░рждрзЗрж░ ржЭрж╛ржбрж╝ржЦржгрзНржб, ржмрж┐рж╣рж╛рж░, ржорзЗржШрж╛рж▓ржпрж╝, ржорж┐ржЬрзЛрж░рж╛ржо, ржЙржбрж╝рж┐рж╖рзНржпрж╛ рж░рж╛ржЬрзНржпржЧрзБрж▓рзЛрждрзЗ ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп ржкрж░рж┐ржорж╛ржгрзЗ ржмрж╛ржВрж▓рж╛ржнрж╛рж╖рзА ржЬржиржЧржг рж░ржпрж╝рзЗржЫрзЗред ",
        "ржнрж╛рж░рждрзЗ рж╣рж┐ржирзНржжрж┐рж░ ржкрж░рзЗржЗ рж╕рж░рзНржмрж╛ржзрж┐ржХ ржкрзНрж░ржЪрж▓рж┐ржд ржнрж╛рж╖рж╛ ржмрж╛ржВрж▓рж╛ред[",
        "рзн][рзо] ржПржЫрж╛ржбрж╝рж╛ржУ ржоржзрзНржп ржкрзНрж░рж╛ржЪрзНржп, ржЖржорзЗрж░рж┐ржХрж╛ ржУ ржЗржЙрж░рзЛржкрзЗ ржЙрж▓рзНрж▓рзЗржЦржпрзЛржЧрзНржп ржкрж░рж┐ржорж╛ржгрзЗ ржмрж╛ржВрж▓рж╛ржнрж╛рж╖рзА ржЕржнрж┐ржмрж╛рж╕рзА рж░ржпрж╝рзЗржЫрзЗред[",
        "рзп] рж╕рж╛рж░рж╛ ржмрж┐рж╢рзНржмрзЗ рж╕ржм ржорж┐рж▓рж┐ржпрж╝рзЗ рзирзм ржХрзЛржЯрж┐рж░ ржЕржзрж┐ржХ рж▓рзЛржХ ржжрзИржиржирзНржжрж┐ржи ржЬрзАржмржирзЗ ржмрж╛ржВрж▓рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред[",
        "рзи] ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЬрж╛рждрзАржпрж╝ рж╕ржЩрзНржЧрзАржд ржПржмржВ ржнрж╛рж░рждрзЗрж░ ржЬрж╛рждрзАржпрж╝ рж╕ржЩрзНржЧрзАржд ржУ рж╕рзНрждрзЛрждрзНрж░ ржмрж╛ржВрж▓рж╛рждрзЗ рж░ржЪрж┐рждред",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // German
    let expected = [
        "Die deutsche Sprache bzw. ",
        "Deutsch ([d╔Ф╩П╠пt═б╩Г]; abgek├╝rzt dt. oder dtsch.) ist eine westgermanische Sprache. ",
        "Ihr Sprachraum umfasst Deutschland, ├Цsterreich, die Deutschschweiz, Liechtenstein, \
        Luxemburg, Ostbelgien, S├╝dtirol, das Elsass und Lothringen sowie Nordschleswig. ",
        "Au├Яerdem ist sie eine Minderheitensprache in einigen europ├дischen und au├Яereurop├дischen \
        L├дndern, z. ",
        "B. in Rum├дnien und S├╝dafrika, sowie Nationalsprache im afrikanischen Namibia",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Hindi
    let expected = [
        "рд╣рд┐рдиреНрджреА рд╡рд┐рд╢реНрд╡ рдХреА рдПрдХ рдкреНрд░рдореБрдЦ рднрд╛рд╖рд╛ рд╣реИ рдПрд╡рдВ рднрд╛рд░рдд рдХреА рд░рд╛рдЬрднрд╛рд╖рд╛ рд╣реИред ",
        "рдХреЗрдиреНрджреНрд░реАрдп рд╕реНрддрд░ рдкрд░ рднрд╛рд░рдд рдореЗрдВ рджреВрд╕рд░реА рдЖрдзрд┐рдХрд╛рд░рд┐рдХ рднрд╛рд╖рд╛ рдЕрдВрдЧреНрд░реЗрдЬреА рд╣реИред ",
        "рдпрд╣ рд╣рд┐рдВрджреБрд╕реНрддрд╛рдиреА рднрд╛рд╖рд╛ рдХреА рдПрдХ рдорд╛рдирдХреАрдХреГрдд рд░реВрдк рд╣реИ рдЬрд┐рд╕рдореЗрдВ рд╕рдВрд╕реНрдХреГрдд рдХреЗ рддрддреНрд╕рдо рддрдерд╛ рддрджреНрднрд╡ рд╢рдмреНрджреЛрдВ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдЕрдзрд┐рдХ рд╣реИ рдФрд░ рдЕрд░рдмреА-рдлрд╝рд╛рд░рд╕реА рд╢рдмреНрдж рдХрдо рд╣реИрдВред ",
        "рд╣рд┐рдВрджреА рд╕рдВрд╡реИрдзрд╛рдирд┐рдХ рд░реВрдк рд╕реЗ рднрд╛рд░рдд рдХреА рд░рд╛рдЬрднрд╛рд╖рд╛ рдФрд░ рднрд╛рд░рдд рдХреА рд╕рдмрд╕реЗ рдЕрдзрд┐рдХ рдмреЛрд▓реА рдФрд░ рд╕рдордЭреА рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рднрд╛рд╖рд╛ рд╣реИред ",
        "рд╣рд╛рд▓рд╛рдБрдХрд┐, рд╣рд┐рдиреНрджреА рднрд╛рд░рдд рдХреА рд░рд╛рд╖реНрдЯреНрд░рднрд╛рд╖рд╛ рдирд╣реАрдВ рд╣реИ,[3] рдХреНрдпреЛрдВрдХрд┐ рднрд╛рд░рдд рдХреЗ рд╕рдВрд╡рд┐рдзрд╛рди рдореЗрдВ рдХреЛрдИ рднреА рднрд╛рд╖рд╛ рдХреЛ рдРрд╕рд╛ рджрд░реНрдЬрд╛ рдирд╣реАрдВ рджрд┐рдпрд╛ рдЧрдпрд╛ рдерд╛ред[",
        "4][5] рдЪреАрдиреА рдХреЗ рдмрд╛рдж рдпрд╣ рд╡рд┐рд╢реНрд╡ рдореЗрдВ рд╕рдмрд╕реЗ рдЕрдзрд┐рдХ рдмреЛрд▓реА рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рднрд╛рд╖рд╛ рднреА рд╣реИред ",
        "рд╡рд┐рд╢реНрд╡ рдЖрд░реНрдерд┐рдХ рдордВрдЪ рдХреА рдЧрдгрдирд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдпрд╣ рд╡рд┐рд╢реНрд╡ рдХреА рджрд╕ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ рд╕реЗ рдПрдХ рд╣реИред[",
        "6]",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Kannada
    let expected = [
        "р▓жр│Нр▓░р▓╛р▓╡р▓┐р▓б р▓нр▓╛р▓╖р│Жр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓кр│Нр▓░р▓╛р▓ор│Бр▓Цр│Нр▓пр▓╡р│Бр▓│р│Нр▓│ р▓нр▓╛р▓╖р│Жр▓пр│В р▓нр▓╛р▓░р▓др▓ж р▓кр│Бр▓░р▓╛р▓др▓ир▓╡р▓╛р▓ж р▓нр▓╛р▓╖р│Жр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓Тр▓Вр▓жр│В р▓Жр▓Чр▓┐р▓░р│Бр▓╡ р▓Хр▓ир│Нр▓ир▓б р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓Ер▓жр▓░ р▓╡р▓┐р▓╡р▓┐р▓з р▓░р│Вр▓кр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓╕р│Бр▓ор▓╛р▓░р│Б р│кр│л р▓жр▓╢р▓▓р▓Хр│Нр▓╖ р▓Ьр▓ир▓░р│Б р▓Жр▓бр│Б р▓ир│Бр▓бр▓┐р▓пр▓╛р▓Чр▓┐ р▓мр▓│р▓╕р│Бр▓др│Нр▓др▓▓р▓┐р▓жр│Нр▓жр▓╛р▓░р│Ж. ",
        "р▓Хр▓ир│Нр▓ир▓б р▓Хр▓░р│Нр▓ир▓╛р▓Яр▓Х р▓░р▓╛р▓Ьр│Нр▓пр▓ж р▓Жр▓бр▓│р▓┐р▓д р▓нр▓╛р▓╖р│Ж.[",
        "р│зр│з] р▓Ьр▓Чр▓др│Нр▓др▓┐р▓ир▓▓р│Нр▓▓р▓┐ р▓Ер▓др│Нр▓пр▓Вр▓д р▓╣р│Жр▓Ър│Нр▓Ър│Б р▓ор▓Вр▓жр▓┐ р▓ор▓╛р▓др▓ир▓╛р▓бр│Бр▓╡ р▓нр▓╛р▓╖р│Жр▓пр│Жр▓Вр▓м р▓ир│Жр▓▓р│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓Зр▓кр│Нр▓кр▓др│Кр▓Вр▓мр▓др│Нр▓др▓ир│Жр▓п р▓╕р│Нр▓ер▓╛р▓и р▓Хр▓ир│Нр▓ир▓бр▓Хр│Нр▓Хр▓┐р▓жр│Ж. ",
        "р│ир│жр│зр│зр▓░ р▓Ьр▓ир▓Чр▓гр▓др▓┐р▓п р▓кр│Нр▓░р▓Хр▓╛р▓░ р▓Ьр▓Чр▓др│Нр▓др▓┐р▓ир▓▓р│Нр▓▓р▓┐ р│м.р│к р▓Хр│Лр▓Яр▓┐ р▓Ьр▓ир▓Чр▓│р│Б р▓Хр▓ир│Нр▓ир▓б р▓ор▓╛р▓др▓ир▓╛р▓бр│Бр▓др│Нр▓др▓╛р▓░р│Ж р▓Ор▓Вр▓жр│Б р▓др▓┐р▓│р▓┐р▓жр│Бр▓мр▓Вр▓жр▓┐р▓жр│Ж. ",
        "р▓Зр▓╡р▓░р▓▓р│Нр▓▓р▓┐ р│л.р│л р▓Хр│Лр▓Яр▓┐ р▓Ьр▓ир▓Чр▓│ р▓ор▓╛р▓др│Гр▓нр▓╛р▓╖р│Ж р▓Хр▓ир│Нр▓ир▓бр▓╡р▓╛р▓Чр▓┐р▓жр│Ж. ",
        "р▓мр│Нр▓░р▓╛р▓╣р│Нр▓ор▓┐ р▓▓р▓┐р▓кр▓┐р▓пр▓┐р▓Вр▓ж р▓░р│Вр▓кр│Бр▓Чр│Кр▓Вр▓б р▓Хр▓ир│Нр▓ир▓б р▓▓р▓┐р▓кр▓┐р▓пр▓ир│Нр▓ир│Б р▓Йр▓кр▓пр│Лр▓Чр▓┐р▓╕р▓┐ р▓Хр▓ир│Нр▓ир▓б р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓мр▓░р│Жр▓пр▓▓р▓╛р▓Чр│Бр▓др│Нр▓др▓жр│Ж. ",
        "р▓Хр▓ир│Нр▓ир▓б р▓мр▓░р▓╣р▓ж р▓ор▓╛р▓жр▓░р▓┐р▓Чр▓│р▓┐р▓Чр│Ж р▓╕р▓╛р▓╡р▓┐р▓░р▓ж р▓Рр▓ир│Вр▓░р│Б р▓╡р▓░р│Бр▓╖р▓Чр▓│ р▓Ър▓░р▓┐р▓др│Нр▓░р│Жр▓пр▓┐р▓жр│Ж. ",
        "р▓Хр│Нр▓░р▓┐.",
        "р▓╢. ",
        "р▓Жр▓░р▓ир│Жр▓п р▓╢р▓др▓ор▓╛р▓ир▓ж р▓кр▓╢р│Нр▓Ър▓┐р▓о р▓Чр▓Вр▓Ч р▓╕р▓╛р▓ор│Нр▓░р▓╛р▓Ьр│Нр▓пр▓ж р▓Хр▓╛р▓▓р▓жр▓▓р│Нр▓▓р▓┐ [р│зр│и] р▓ор▓др│Нр▓др│Б р▓Тр▓Вр▓мр▓др│Нр▓др▓ир│Жр▓п р▓╢р▓др▓ор▓╛р▓ир▓ж р▓░р▓╛р▓╖р│Нр▓Яр│Нр▓░р▓Хр│Вр▓Я р▓╕р▓╛р▓ор│Нр▓░р▓╛р▓Ьр│Нр▓пр▓ж р▓Хр▓╛р▓▓р▓жр▓▓р│Нр▓▓р▓┐ р▓╣р▓│р▓Чр▓ир│Нр▓ир▓б р▓╕р▓╛р▓╣р▓┐р▓др│Нр▓п р▓Ер▓др│Нр▓пр▓Вр▓д р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓и р▓░р▓╛р▓Ьр▓╛р▓╢р│Нр▓░р▓п р▓кр▓бр│Жр▓пр▓┐р▓др│Б.[",
        "р│зр│й][р│зр│к] р▓Ер▓жр▓▓р│Нр▓▓р▓жр│Ж р▓╕р▓╛р▓╡р▓┐р▓░ р▓╡р▓░р│Бр▓╖р▓Чр▓│ р▓╕р▓╛р▓╣р▓┐р▓др│Нр▓п р▓кр▓░р▓Вр▓кр▓░р│Ж р▓Хр▓ир│Нр▓ир▓бр▓Хр│Нр▓Хр▓┐р▓жр│Ж.[",
        "р│зр│л]р▓╡р▓┐р▓ир│Лр▓мр▓╛ р▓нр▓╛р▓╡р│Ж р▓Хр▓ир│Нр▓ир▓б р▓▓р▓┐р▓кр▓┐р▓пр▓ир│Нр▓ир│Б р▓▓р▓┐р▓кр▓┐р▓Чр▓│ р▓░р▓╛р▓гр▓┐р▓пр│Жр▓Вр▓жр│Б р▓╣р│Кр▓Чр▓│р▓┐р▓жр│Нр▓жр▓╛р▓░р│Ж.[",
        "р▓╕р│Вр▓Хр│Нр▓д р▓Йр▓▓р│Нр▓▓р│Зр▓Цр▓и р▓мр│Зр▓Хр│Б]",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Sinhalese
    let expected = [
        "р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖Пр╖Ар╖Ъ р╢┤р╖КтАНр╢╗р╢░р╖Пр╢▒ р╢вр╖Пр╢нр╖Тр╢║ р╖Ар╢▒ р╖Гр╖Тр╢Вр╖Др╢╜ р╢вр╢▒р╢║р╖Пр╢Ьр╖Ъ р╢╕р╖Ар╖К р╢╢р╖Г р╖Гр╖Тр╢Вр╖Др╢╜ р╖Ар╖Щр╢║р╖Т. ",
        "р╢Ер╢п р╖Ар╢▒ р╖Ар╖Тр╢з р╢╕р╖Тр╢╜р╖Тр╢║р╢▒ 20 р╢Ър╢з р╢Ер╢░р╖Тр╢Ъ р╖Гр╖Тр╢Вр╖Др╢╜ р╖Гр╖Д р╢╕р╖Тр╢╜р╖Тр╢║р╢▒ 3р╢Ър╢з р╢Ер╢░р╖Тр╢Ъ р╖Гр╖Тр╢Вр╖Др╢╜ р╢▒р╖Ьр╖Ар╢▒ р╢вр╢▒р╢Ьр╖Др╢▒р╢║р╢Ър╖К р╖Гр╖Тр╢Вр╖Др╢╜ р╢╖р╖Пр╖Вр╖Пр╖А р╢╖р╖Пр╖Ар╖Тр╢н р╢Ър╢╗р╢нр╖Т. ",
        "р╖Гр╖Тр╢Вр╖Др╢╜тАН р╢Йр╢▒р╖Кр╢пр╖Ф-р╢║р╖Фр╢╗р╖Эр╢┤р╖Ур╢║ р╢╖р╖Пр╖Вр╖Пр╖Ар╢╜ р╢Лр╢┤ р╢Ьр╢лр╢║р╢Ър╖К р╖Ар╢▒ р╢Йр╢▒р╖Кр╢пр╖Ф-р╢Жр╢╗р╖Кр╢║ р╢╖р╖Пр╖Вр╖П р╢Ьр╢лр╢║р╢з р╢Ер╢║р╖Тр╢нр╖Т р╖Ар╢▒ р╢Ер╢нр╢╗ р╢╕р╖Пр╢╜ р╢пр╖Тр╖Ар╢║р╖Тр╢▒ р╢╖р╖Пр╖Ар╖Тр╢н р╢Ър╢╗р╢▒ р╢пр╖Тр╖Ар╖Щр╖Др╖Т \
        р╢╖р╖Пр╖Вр╖Пр╖А р╖Гр╖Тр╢Вр╖Др╢╜р╢║р╖Щр╢▒р╖К р╢┤р╖Рр╖Ар╢н р╢Ср╢▒р╖Кр╢▒р╢Ър╖Т. ",
        "р╖Гр╖Тр╢Вр╖Др╢╜ р╖Бр╖КтАНр╢╗р╖У р╢╜р╢Вр╢Ър╖Пр╖Ар╖Ъ р╢▒р╖Тр╢╜ р╢╖р╖Пр╖Вр╖Пр╖Ар╢║р╖Т .",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Tamil
    let expected = [
        "родрооро┐ро┤рпН роорпКро┤ро┐ (Tamil language) родрооро┐ро┤ро░рпНроХро│ро┐ройродрпБроорпН, родрооро┐ро┤рпН рокрпЗроЪрпБроорпН рокро▓ро░родрпБроорпН родро╛ропрпНроорпКро┤ро┐ роЖроХрпБроорпН. ",
        "родрооро┐ро┤рпН родро┐ро░ро╛ро╡ро┐роЯ роорпКро┤ро┐роХрпН роХрпБроЯрпБроорпНрокродрпНродро┐ройрпН роорпБродройрпНроорпИропро╛рой роорпКро┤ро┐роХро│ро┐ро▓рпН роТройрпНро▒рпБроорпН роЪрпЖроорпНроорпКро┤ро┐ропрпБроорпН роЖроХрпБроорпН. ",
        "роЗроирпНродро┐ропро╛, роЗро▓роЩрпНроХрпИ, рооро▓рпЗроЪро┐ропро╛, роЪро┐роЩрпНроХрокрпНрокрпВро░рпН роЖроХро┐роп роиро╛роЯрпБроХро│ро┐ро▓рпН роЕродро┐роХ роЕро│ро╡ро┐ро▓рпБроорпН, роРроХрпНроХро┐роп роЕро░рокрпБ роЕроорпАро░роХроорпН, \
        родрпЖройрпНройро╛рокрпНрокро┐ро░ро┐роХрпНроХро╛, роорпКро░ро┐роЪро┐ропроЪрпБ, рокро┐роЬро┐, ро░рпАропрпВройро┐ропройрпН, роЯро┐ро░ро┐ройро┐роЯро╛роЯрпН рокрпЛройрпНро▒ роиро╛роЯрпБроХро│ро┐ро▓рпН роЪро┐ро▒ро┐роп роЕро│ро╡ро┐ро▓рпБроорпН родрооро┐ро┤рпН \
        рокрпЗроЪрокрпНрокроЯрпБроХро┐ро▒родрпБ. ",
        "1997роЖроорпН роЖрогрпНроЯрпБрокрпН рокрпБро│рпНро│ро┐ ро╡ро┐ро╡ро░рокрпНрокроЯро┐ роЙро▓роХроорпН роорпБро┤рпБро╡родро┐ро▓рпБроорпН 8 роХрпЛроЯро┐ (80 рооро┐ро▓рпНро▓ро┐ропройрпН) роороХрпНроХро│ро╛ро▓рпН рокрпЗроЪрокрпНрокроЯрпБроорпН \
        родрооро┐ро┤рпН[13], роТро░рпБ роорпКро┤ро┐ропрпИродрпН родро╛ропрпНроорпКро┤ро┐ропро╛роХроХрпН роХрпКрогрпНроЯрпБ рокрпЗроЪрпБроорпН роороХрпНроХро│ро┐ройрпН роОрогрпНрогро┐роХрпНроХрпИ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН \
        рокродро┐ройрпЖроЯрпНроЯро╛ро╡родрпБ роЗроЯродрпНродро┐ро▓рпН роЙро│рпНро│родрпБ.[",
        "14] роЗрогрпИропродрпНродро┐ро▓рпН роЕродро┐роХроорпН рокропройрпНрокроЯрпБродрпНродрокрпНрокроЯрпБроорпН роЗроирпНродро┐роп роорпКро┤ро┐роХро│ро┐ро▓рпН родрооро┐ро┤рпН роорпБродройрпНроорпИропро╛роХ роЙро│рпНро│родро╛роХ 2017 роЖро╡родрпБ \
        роЖрогрпНроЯро┐ро▓рпН роироЯрпИрокрпЖро▒рпНро▒ роХрпВроХрпБро│рпН роХрогроХрпНроХрпЖроЯрпБрокрпНрокро┐ро▓рпН родрпЖро░ро┐роп ро╡роирпНродродрпБ.[",
        "15]",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Telugu
    let expected = [
        "р░Жр░Вр░зр▒Нр░░ р░кр▒Нр░░р░жр▒Зр░╢р▒Н, р░др▒Жр░▓р░Вр░Чр░╛р░г р░░р░╛р░╖р▒Нр░Яр▒Нр░░р░╛р░▓ р░Ер░зр░┐р░Хр░╛р░░ р░нр░╛р░╖ р░др▒Жр░▓р▒Бр░Чр▒Б. ",
        "р░нр░╛р░░р░д р░жр▒Зр░╢р░Вр░▓р▒Л р░др▒Жр░▓р▒Бр░Чр▒Б р░ор░╛р░др▒Гр░нр░╛р░╖р░Чр░╛ р░ор░╛р░Яр▒Нр░▓р░╛р░бр▒З 8.7 р░Хр▒Лр░Яр▒Нр░▓ (2001) р░Ьр░ир░╛р░нр░╛р░др▒Л [1] р░кр▒Нр░░р░╛р░Вр░др▒Ар░п р░нр░╛р░╖р░▓р░▓р▒Л р░ор▒Кр░жр░Яр░┐ р░╕р▒Нр░ер░╛р░ир░Вр░▓р▒Л \
        р░Йр░Вр░жр░┐. ",
        "р░кр▒Нр░░р░кр░Вр░Ър░Вр░▓р▒Лр░ир░┐ р░кр▒Нр░░р░Ьр░▓р▒Б р░Ер░др▒Нр░пр░зр░┐р░Хр░ор▒Бр░Чр░╛ р░ор░╛р░Яр▒Нр░▓р░╛р░бр▒З р░нр░╛р░╖р░▓р░▓р▒Л 15 р░╕р▒Нр░ер░╛р░ир░ор▒Бр░▓р▒Лр░ир▒В, р░нр░╛р░░р░д р░жр▒Зр░╢р░ор▒Бр░▓р▒Л р░╣р░┐р░Вр░жр▒А, р░др░░р▒Нр░╡р░╛р░д \
        р░╕р▒Нр░ер░╛р░ир░ор▒Бр░▓р▒Лр░ир▒В р░ир░┐р░▓р▒Бр░╕р▒Нр░др▒Бр░Вр░жр░┐. ",
        "р░кр░╛р░др░╡р▒Ир░и р░кр▒Нр░░р░кр░Вр░Ъ р░нр░╛р░╖ р░Чр░гр░╛р░Вр░Хр░╛р░▓ (р░Ор░ер▒Нр░ир▒Лр░▓р░╛р░Чр▒Н) р░кр▒Нр░░р░Хр░╛р░░р░В р░кр▒Нр░░р░кр░Вр░Ър░╡р▒Нр░пр░╛р░кр▒Нр░др░Вр░Чр░╛ 7.4 р░Хр▒Лр░Яр▒Нр░▓р▒Б р░ор░Вр░жр░┐р░Хр░┐ р░ор░╛р░др▒Гр░нр░╛р░╖р░Чр░╛ р░Йр░Вр░жр░┐.[",
        "2] р░ор▒Кр░жр░Яр░┐ р░нр░╛р░╖р░Чр░╛ р░ор░╛р░Яр▒Нр░▓р░╛р░бр░др░╛р░░р▒Б. ",
        "р░Ер░др░┐ р░кр▒Нр░░р░╛р░Ър▒Ар░и р░жр▒Зр░╢ р░нр░╛р░╖р░▓р░▓р▒Л р░╕р░Вр░╕р▒Нр░Хр▒Гр░др░ор▒Б р░др░ор░┐р░│р░ор▒Бр░др▒Л р░мр░╛р░Яр▒Б р░др▒Жр░▓р▒Бр░Чр▒Б р░нр░╛р░╖р░ир▒Б 2008 р░Ер░Хр▒Нр░Яр▒Лр░мр░░р▒Б 31р░и р░нр░╛р░░р░д р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡р░ор▒Б \
        р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░┐р░Вр░жр░┐.",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);

    // Urdu
    let expected = [
        "╪з┘П╪▒╪п┘П┘И ┘Д╪┤┌й╪▒█М ╪▓╪и╪з┘Ж[8] (█М╪з ╪м╪п█М╪п ┘Е╪╣█М╪з╪▒█М ╪з╪▒╪п┘И) ╪и╪▒╪╡╪║█М╪▒ ┌й█М ┘Е╪╣█М╪з╪▒█М ╪▓╪и╪з┘Ж┘И┌║ ┘Е█М┌║ ╪│█Т ╪з█М┌й █Б█Т█Ф ",
        "█М█Б ┘╛╪з┌й╪│╪к╪з┘Ж ┌й█М ┘В┘И┘Е█М ╪з┘И╪▒ ╪▒╪з╪и╪╖█Б ╪╣╪з┘Е█Б ┌й█М ╪▓╪и╪з┘Ж █Б█Т╪М ╪м╪и┌й█Б ╪и┌╛╪з╪▒╪к ┌й█М ┌Ж┌╛█Т ╪▒█М╪з╪│╪к┘И┌║ ┌й█М ╪п┘Б╪к╪▒█М ╪▓╪и╪з┘Ж ┌й╪з ╪п╪▒╪м█Б ╪▒┌й┌╛╪к█М █Б█Т█Ф ",
        "╪в╪ж█М┘Ж █Б┘Ж╪п ┌й█Т ┘Е╪╖╪з╪и┘В ╪з╪│█Т 22 ╪п┘Б╪к╪▒█М ╪┤┘Ж╪з╪о╪к ╪▓╪и╪з┘Ж┘И┌║ ┘Е█М┌║ ╪┤╪з┘Е┘Д ┌й█М╪з ╪м╪з┌Ж┌й╪з █Б█Т█Ф ",
        "2001╪б ┌й█М ┘Е╪▒╪п┘Е ╪┤┘Е╪з╪▒█М ┌й█Т ┘Е╪╖╪з╪и┘В ╪з╪▒╪п┘И ┌й┘И ╪и╪╖┘И╪▒ ┘Е╪з╪п╪▒█М ╪▓╪и╪з┘Ж ╪и┌╛╪з╪▒╪к ┘Е█М┌║ 5.01% ┘Б█М╪╡╪п ┘Д┘И┌п ╪и┘И┘Д╪к█Т █Б█М┌║ ╪з┘И╪▒ ╪з╪│ ┘Д╪н╪з╪╕ ╪│█Т █М█Б ╪и┌╛╪з╪▒╪к ┌й█М ┌Ж┌╛┘╣█М ╪и┌С█М ╪▓╪и╪з┘Ж █Б█Т ╪м╪и┌й█Б ┘╛╪з┌й╪│╪к╪з┘Ж ┘Е█М┌║ ╪з╪│█Т ╪и╪╖┘И╪▒ ┘Е╪з╪п╪▒█М ╪▓╪и╪з┘Ж 7.59% ┘Б█М╪╡╪п ┘Д┘И┌п ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒╪к█Т █Б█М┌║╪М █М█Б ┘╛╪з┌й╪│╪к╪з┘Ж ┌й█М ┘╛╪з┘Ж┌Ж┘И█М┌║ ╪и┌С█М ╪▓╪и╪з┘Ж █Б█Т█Ф ",
        "╪з╪▒╪п┘И ╪к╪з╪▒█М╪о█М ╪╖┘И╪▒ ┘╛╪▒ █Б┘Ж╪п┘И╪│╪к╪з┘Ж ┌й█М ┘Е╪│┘Д┘Е ╪в╪и╪з╪п█М ╪│█Т ╪м┌С█М █Б█Т█Ф[",
        "╪н┘И╪з┘Д█Б ╪п╪▒┌й╪з╪▒] ╪и╪╣╪╢ ╪░╪о█М╪▒█Б ╪з┘Д┘Б╪з╪╕ ┌й█Т ╪╣┘Д╪з┘И█Б █М█Б ╪▓╪и╪з┘Ж ┘Е╪╣█М╪з╪▒█М █Б┘Ж╪п█М ╪│█Т ┘В╪з╪и┘Д ┘Б█Б┘Е █Б█Т ╪м┘И ╪з╪│ ╪о╪╖█Т ┌й█М █Б┘Ж╪п┘И╪д┌║ ╪│█Т ┘Е┘Ж╪│┘И╪и █Б█Т█Ф[",
        "╪н┘И╪з┘Д█Б ╪п╪▒┌й╪з╪▒] ╪▓╪и╪з┘Ж┘Р ╪з╪▒╪п┘И ┌й┘И ┘╛█Б┌Ж╪з┘Ж ┘И ╪к╪▒┘В█М ╪з╪│ ┘И┘В╪к ┘Е┘Д█М ╪м╪и ╪и╪▒╪╖╪з┘Ж┘И█М ╪п┘И╪▒ ┘Е█М┌║ ╪з┘Ж┌п╪▒█М╪▓ ╪н┌й┘Е╪▒╪з┘Ж┘И┌║ ┘Ж█Т ╪з╪│█Т ┘Б╪з╪▒╪│█М ┌й█М ╪и╪м╪з╪ж█Т ╪з┘Ж┌п╪▒█М╪▓█М ┌й█Т ╪│╪з╪к┌╛ ╪┤┘Е╪з┘Д█М █Б┘Ж╪п┘И╪│╪к╪з┘Ж ┌й█Т ╪╣┘Д╪з┘В┘И┌║ ╪з┘И╪▒ ╪м┘Е┘И┌║ ┘И ┌й╪┤┘Е█М╪▒ ┘Е█М┌║ ╪з╪│█Т ╪│┘Ж█Б 1846╪б ╪з┘И╪▒ ┘╛┘Ж╪м╪з╪и ┘Е█М┌║ ╪│┘Ж█Б 1849╪б ┘Е█М┌║ ╪и╪╖┘И╪▒ ╪п┘Б╪к╪▒█М ╪▓╪и╪з┘Ж ┘Ж╪з┘Б╪░ ┌й█М╪з█Ф ",
        "╪з╪│ ┌й█Т ╪╣┘Д╪з┘И█Б ╪о┘Д█М╪м█М╪М █М┘И╪▒┘╛█М╪М ╪з█М╪┤█М╪з╪ж█М ╪з┘И╪▒ ╪з┘Е╪▒█М┌й█М ╪╣┘Д╪з┘В┘И┌║ ┘Е█М┌║ ╪з╪▒╪п┘И ╪и┘И┘Д┘Ж█Т ┘И╪з┘Д┘И┌║ ┌й█М ╪з█М┌й ╪и┌С█М ╪к╪╣╪п╪з╪п ╪в╪и╪з╪п █Б█Т ╪м┘И ╪и┘Ж█М╪з╪п█М ╪╖┘И╪▒ ┘╛╪▒ ╪м┘Ж┘И╪и█М ╪з█М╪┤█М╪з╪б ╪│█Т ┌й┘И┌Ж ┌й╪▒┘Ж█Т ┘И╪з┘Д█Т ╪з█Б┘Д┘Р ╪з╪▒╪п┘И █Б█М┌║█Ф ",
        "1999╪б ┌й█Т ╪з╪╣╪п╪з╪п ┘И╪┤┘Е╪з╪▒ ┌й█Т ┘Е╪╖╪з╪и┘В ╪з╪▒╪п┘И ╪▓╪и╪з┘Ж ┌й█Т ┘Е╪м┘Е┘И╪╣█М ┘Е╪к┌й┘Д┘Е█М┘Ж ┌й█М ╪к╪╣╪п╪з╪п ╪п╪│ ┌й╪▒┘И┌С ╪│╪з┘╣┌╛ ┘Д╪з┌й┌╛ ┌й█Т ┘Д┌п ╪и┌╛┌п ╪к┌╛█М█Ф ",
        "╪з╪│ ┘Д╪н╪з╪╕ ╪│█Т █М█Б ╪п┘Ж█М╪з ┌й█М ┘Ж┘И█М┌║ ╪и┌С█М ╪▓╪и╪з┘Ж █Б█Т█Ф",
    ];
    let s = expected.join("");
    let tokens: Vec<&str> = tokenizer.tokenize(&s).collect();
    assert_eq!(tokens, expected);
}
